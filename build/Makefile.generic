# Makefile.generic

# Copyright 2009-2012 Nixotic Design
#
# This file is part of AVR-LibNixotic.

# AVR-LibNixotic is free software: you can redistribute it and/or modify
# it under the terms of the Lesser GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AVR-LibNixotic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Lesser GNU General Public License for more details.

# You should have received a copy of the Lesser GNU General Public License
# along with AVR-LibNixotic.  If not, see <http://www.gnu.org/licenses/>.

# This makefile presumes the following project directory layout:
# project-name/
#   lib/
#   source/
#   bin/
#   build/
#     dep/

# The makefile should be in the build/ directory while the project specific files
# should be in the source/ directory. If you are making use of external libraries
# such as AVR-LibNixotic then I suggest including them by creating a symlink in
# the project directory:
#   cd ~/project-name
#   ln -s ~/AVR-LibNixotic lib
 
# PROJECTNAME and NAME can be the same
# MAIN should point to whichever file has 'int main(void) {...' in it.
# Change MCU as appropriate

## General Flags
PROJECT = <PROJECTNAME>
MCU = attiny2313
NAME = <NAME>
TARGET = ../bin/$(NAME).elf
MAIN = main
CC = avr-gcc

#$(shell if [ ! -f version ]; then echo 0 > version; fi ;)
#VER := $(shell echo `cat version`+1| bc)

AVRDUDE = avrdude -c avrispv2 -P usb -p $(MCU) # edit this line for your programmer

## Options common to compile, link and assembly rules
COMMON = -mmcu=$(MCU)

## Compile options common for all C compilation units.
CFLAGS = $(COMMON) -DTRUE=1 -DFALSE=0
CFLAGS += -Wall -Wstrict-prototypes -gdwarf-2 -Os -std=gnu99 -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
CFLAGS += -MD -MP -MT $(*F).o -MF dep/$(@F).d -DF_CPU=$(F_CPU)

## Assembly specific flags
ASMFLAGS = $(COMMON)
ASMFLAGS += $(CFLAGS)
ASMFLAGS += -x assembler-with-cpp -Wa,-gdwarf2

## Linker flags
LDFLAGS = $(COMMON)
LDFLAGS +=  -Wl,-Map=$(NAME).map -lm


## Intel Hex file production flags
HEX_FLASH_FLAGS = -R .eeprom -R .fuse -R .lock -R .signature

HEX_EEPROM_FLAGS = -j .eeprom
HEX_EEPROM_FLAGS += --set-section-flags=.eeprom="alloc,load"
HEX_EEPROM_FLAGS += --change-section-lma .eeprom=0 --no-change-warnings


## Objects that must be built in order to link
OBJECTS = $(NAME).o UART.o 

## Objects explicitly added by the user
LINKONLYOBJECTS = 



## Build
all: $(TARGET) ../bin/$(NAME).hex $(NAME).eep $(NAME).lss size

## Compile
$(NAME).o: ../source/$(MAIN).c
	$(CC) $(INCLUDES) -o $(NAME).o $(CFLAGS) -c  $<



UART.o: ../lib/UART.c
	$(CC) $(INCLUDES) $(CFLAGS) -c $<


##Link
$(TARGET): $(OBJECTS)
	 $(CC) $(LDFLAGS) $(OBJECTS) $(LINKONLYOBJECTS) $(LIBDIRS) $(LIBS) -o $(TARGET)

%.hex: $(TARGET)
	avr-objcopy -O ihex $(HEX_FLASH_FLAGS)  $< $@

%.eep: $(TARGET)
	-avr-objcopy $(HEX_EEPROM_FLAGS) -O ihex $< $@ || exit 0

%.lss: $(TARGET)
	avr-objdump -h -S $< > $@

size: ${TARGET}
	@echo
	@avr-size  ${TARGET} #-C --mcu=${MCU}

# rule for uploading firmware:
program: $(TARGET).hex
	$(AVRDUDE) -U flash:w:$(TARGET).hex:i


## Clean target
.PHONY: clean
clean:
	-rm -rf $(OBJECTS) $(NAME).elf dep/* ../bin/* $(NAME).hex $(NAME).eep $(NAME).lss $(NAME).map *.lst $(MAIN).*


## Other dependencies
-include $(shell mkdir dep 2>/dev/null & mkdir ../build 2>/dev/null & mkdir ../bin 2>/dev/null) $(wildcard dep/*)

